// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package directories_repo

import (
	"context"
)

const getCategoriesAndSubcategories = `-- name: GetCategoriesAndSubcategories :many
 SELECT c.id as category_id, c.name as category_name, s.id as subcategory_id, s.name as subcategory_name FROM human_resources.categories c
    JOIN human_resources.subcategories s ON c.id = s.category_id
 group by c.id, s.id
`

type GetCategoriesAndSubcategoriesRow struct {
	CategoryID      int32
	CategoryName    string
	SubcategoryID   int32
	SubcategoryName string
}

func (q *Queries) GetCategoriesAndSubcategories(ctx context.Context) ([]*GetCategoriesAndSubcategoriesRow, error) {
	rows, err := q.db.Query(ctx, getCategoriesAndSubcategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCategoriesAndSubcategoriesRow
	for rows.Next() {
		var i GetCategoriesAndSubcategoriesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.SubcategoryID,
			&i.SubcategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLanguages = `-- name: GetLanguages :many
SELECT l.name from human_resources.languages l
`

func (q *Queries) GetLanguages(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
