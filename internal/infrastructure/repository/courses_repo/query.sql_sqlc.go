// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package courses_repo

import (
	"context"
)

const addCourseBasicInfo = `-- name: AddCourseBasicInfo :exec
UPDATE human_resources.courses SET title = $1, subtitle = $2,  description = $3, language = $4,level = $5, category_id = $6, subcategory_id = $7, updated_at = now() WHERE id = $8
`

type AddCourseBasicInfoParams struct {
	Title         string
	Subtitle      *string
	Description   string
	Language      *string
	Level         *string
	CategoryID    *int32
	SubcategoryID *int32
	ID            int32
}

func (q *Queries) AddCourseBasicInfo(ctx context.Context, arg *AddCourseBasicInfoParams) error {
	_, err := q.db.Exec(ctx, addCourseBasicInfo,
		arg.Title,
		arg.Subtitle,
		arg.Description,
		arg.Language,
		arg.Level,
		arg.CategoryID,
		arg.SubcategoryID,
		arg.ID,
	)
	return err
}

const addCourseGoals = `-- name: AddCourseGoals :exec
UPDATE human_resources.courses SET course_goals = $1, requirements = $2, target_audience = $3, updated_at = now() WHERE id = $4
`

type AddCourseGoalsParams struct {
	CourseGoals    []string
	Requirements   []string
	TargetAudience []string
	ID             int32
}

func (q *Queries) AddCourseGoals(ctx context.Context, arg *AddCourseGoalsParams) error {
	_, err := q.db.Exec(ctx, addCourseGoals,
		arg.CourseGoals,
		arg.Requirements,
		arg.TargetAudience,
		arg.ID,
	)
	return err
}

const createCourseBase = `-- name: CreateCourseBase :exec
INSERT INTO human_resources.courses (title,type,author_id, category_id, time_planned, description, created_at, updated_at) VALUES ($1, $2, $3, $4,$5, $6, now(), now()) RETURNING id
`

type CreateCourseBaseParams struct {
	Title       string
	Type        NullHumanResourcesCourseTypes
	AuthorID    int32
	CategoryID  *int32
	TimePlanned *string
	Description string
}

func (q *Queries) CreateCourseBase(ctx context.Context, arg *CreateCourseBaseParams) error {
	_, err := q.db.Exec(ctx, createCourseBase,
		arg.Title,
		arg.Type,
		arg.AuthorID,
		arg.CategoryID,
		arg.TimePlanned,
		arg.Description,
	)
	return err
}

const getEightCoursesShort = `-- name: GetEightCoursesShort :many
SELECT id,
       title,
       description FROM human_resources.courses WHERE status != 'DRAFT' AND status != 'PENDING' ORDER BY created_at DESC LIMIT 8
`

type GetEightCoursesShortRow struct {
	ID          int32
	Title       string
	Description string
}

func (q *Queries) GetEightCoursesShort(ctx context.Context) ([]*GetEightCoursesShortRow, error) {
	rows, err := q.db.Query(ctx, getEightCoursesShort)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetEightCoursesShortRow
	for rows.Next() {
		var i GetEightCoursesShortRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
