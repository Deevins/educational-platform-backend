// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package users

import (
	"context"
)

const addTeachingExperience = `-- name: AddTeachingExperience :one
INSERT INTO human_resources.instructors_info (user_id, has_video_knowledge, current_audience, has_previous_experience) VALUES ($1, $2, $3, $4) RETURNING id
`

type AddTeachingExperienceParams struct {
	UserID                int32
	HasVideoKnowledge     string
	CurrentAudience       string
	HasPreviousExperience string
}

func (q *Queries) AddTeachingExperience(ctx context.Context, arg *AddTeachingExperienceParams) (int32, error) {
	row := q.db.QueryRow(ctx, addTeachingExperience,
		arg.UserID,
		arg.HasVideoKnowledge,
		arg.CurrentAudience,
		arg.HasPreviousExperience,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO human_resources.users (full_name, email,description, password_hashed, phone_number) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateUserParams struct {
	FullName       string
	Email          string
	Description    *string
	PasswordHashed string
	PhoneNumber    string
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FullName,
		arg.Email,
		arg.Description,
		arg.PasswordHashed,
		arg.PhoneNumber,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getHasUserTriedInstructor = `-- name: GetHasUserTriedInstructor :one
SELECT has_user_tried_instructor from human_resources.users WHERE id = $1
`

func (q *Queries) GetHasUserTriedInstructor(ctx context.Context, id int32) (*bool, error) {
	row := q.db.QueryRow(ctx, getHasUserTriedInstructor, id)
	var has_user_tried_instructor *bool
	err := row.Scan(&has_user_tried_instructor)
	return has_user_tried_instructor, err
}

const getUserByEmailAndHashedPassword = `-- name: GetUserByEmailAndHashedPassword :one
SELECT id, full_name, description, avatar_url, email, password_hashed, created_at, updated_at, has_user_tried_instructor, phone_number, role, students_count, courses_count, instructor_rating from human_resources.users WHERE email = $1 AND password_hashed = $2 LIMIT 1
`

type GetUserByEmailAndHashedPasswordParams struct {
	Email          string
	PasswordHashed string
}

func (q *Queries) GetUserByEmailAndHashedPassword(ctx context.Context, arg *GetUserByEmailAndHashedPasswordParams) (*HumanResourcesUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndHashedPassword, arg.Email, arg.PasswordHashed)
	var i HumanResourcesUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Description,
		&i.AvatarUrl,
		&i.Email,
		&i.PasswordHashed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HasUserTriedInstructor,
		&i.PhoneNumber,
		&i.Role,
		&i.StudentsCount,
		&i.CoursesCount,
		&i.InstructorRating,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, description, avatar_url, email, password_hashed, created_at, updated_at, has_user_tried_instructor, phone_number, role, students_count, courses_count, instructor_rating from human_resources.users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (*HumanResourcesUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i HumanResourcesUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Description,
		&i.AvatarUrl,
		&i.Email,
		&i.PasswordHashed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HasUserTriedInstructor,
		&i.PhoneNumber,
		&i.Role,
		&i.StudentsCount,
		&i.CoursesCount,
		&i.InstructorRating,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, full_name, description, avatar_url, email, password_hashed, created_at, updated_at, has_user_tried_instructor, phone_number, role, students_count, courses_count, instructor_rating from human_resources.users
`

func (q *Queries) GetUsers(ctx context.Context) ([]*HumanResourcesUser, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*HumanResourcesUser
	for rows.Next() {
		var i HumanResourcesUser
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Description,
			&i.AvatarUrl,
			&i.Email,
			&i.PasswordHashed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HasUserTriedInstructor,
			&i.PhoneNumber,
			&i.Role,
			&i.StudentsCount,
			&i.CoursesCount,
			&i.InstructorRating,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvatar = `-- name: UpdateAvatar :one
UPDATE human_resources.users SET avatar_url = $1 WHERE id = $2 RETURNING id
`

type UpdateAvatarParams struct {
	AvatarUrl *string
	ID        int32
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg *UpdateAvatarParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateAvatar, arg.AvatarUrl, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateHasUserTriedInstructor = `-- name: UpdateHasUserTriedInstructor :one
UPDATE human_resources.users SET has_user_tried_instructor = true WHERE id = $1 RETURNING id
`

func (q *Queries) UpdateHasUserTriedInstructor(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, updateHasUserTriedInstructor, id)
	err := row.Scan(&id)
	return id, err
}

const updateUserDescription = `-- name: UpdateUserDescription :one
UPDATE human_resources.users SET description = $1 WHERE id = $2 RETURNING id
`

type UpdateUserDescriptionParams struct {
	Description *string
	ID          int32
}

func (q *Queries) UpdateUserDescription(ctx context.Context, arg *UpdateUserDescriptionParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserDescription, arg.Description, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE human_resources.users SET email = $1 WHERE id = $2 RETURNING id
`

type UpdateUserEmailParams struct {
	Email string
	ID    int32
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg *UpdateUserEmailParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.Email, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUserFullName = `-- name: UpdateUserFullName :one
UPDATE human_resources.users SET full_name = $1 WHERE id = $2 RETURNING id
`

type UpdateUserFullNameParams struct {
	FullName string
	ID       int32
}

func (q *Queries) UpdateUserFullName(ctx context.Context, arg *UpdateUserFullNameParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserFullName, arg.FullName, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE human_resources.users SET phone_number = $1 WHERE id = $2 RETURNING id
`

type UpdateUserPhoneParams struct {
	PhoneNumber string
	ID          int32
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg *UpdateUserPhoneParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserPhone, arg.PhoneNumber, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
